<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spmystery.episode.account.mapper.UserCashOutAccountApplicationMapper">

    <resultMap id="BaseResultMap" type="com.spmystery.episode.account.entity.UserCashOutAccountApplication">
        <id column="id" property="id"/>
        <result column="user_id" property="userId"/>
        <result column="amount" property="amount"/>
        <result column="status" property="status"/>
        <result column="level" property="level"/>
        <result column="approve_user_id" property="approveUserId"/>
        <result column="approve_user_name" property="approveUserName"/>
        <result column="approve_time" property="approveTime"/>
        <result column="reject_reason" property="rejectReason"/>
        <result column="last_modify_time" property="lastModifyTime"/>
        <result column="create_time" property="create_time"/>
    </resultMap>

    <sql id="BaseColumnList">
        id, user_id, amount, `status`, `level`, approve_user_id, approve_user_name, approve_time, reject_reason, last_modify_time, create_time
    </sql>

    <insert id="insert" parameterType="UserCashOutAccountApplication">
        INSERT INTO user_cash_out_account_application
        (user_id, amount, `status`, `level`, approve_user_id, approve_user_name, approve_time, reject_reason)
        VALUES (#{userId}, #{amount}, #{status}, #{level}, #{approveUserId}, #{approveUserName}, #{approveTime}, #{reject_reason})
    </insert>

    <select id="findByUserId" resultMap="BaseResultMap" parameterType="String">
        SELECT
        <include refid="BaseColumnList"/>
        FROM user_cash_out_account_application
        WHERE user_id = #{userId}
    </select>


    <update id="updateApproveById" parameterType="UserCashOutAccountApplication">
        UPDATE
            user_cash_out_account_application
        SET
            `status` = #{status},
            approve_user_id = #{approveUserId},
            approve_user_name = #{approveUserName},
            approve_time = #{approveTime},
            reject_reason = #{rejectReason}
        WHERE id = #{id}
    </update>

    <select id="findCountByUserIdAndStatus" parameterType="map" resultType="Integer">
        SELECT count(*)
        FROM user_cash_out_account_application
        WHERE user_id = #{userId}
        <choose>
            <when test="statuses != null and statuses.size() > 0">
                `status` IN
                <foreach collection="statuses" separator="," open="(" close=")" item="status">
                    #{status}
                </foreach>
            </when>
            <otherwise>
                1 = 2
            </otherwise>
        </choose>
        AND DATE(create_time) = CURDATE();
    </select>

    <select id="findCountByUserIdAndLevel" parameterType="map" resultType="Integer">
        SELECT count(*)
        FROM user_cash_out_account_application
        WHERE user_id = #{userId}
        AND `status` IN(0, 1)
        AND `level` =#{level}
        AND DATE(create_time) = CURDATE();
    </select>

    <select id="findSumInDoingByUserId" parameterType="String" resultType="decimal">
        SELECT SUM(amount)
        FROM user_cash_out_account_application
        WHERE user_id = #{userId}
        AND `status` = 0
    </select>

</mapper>